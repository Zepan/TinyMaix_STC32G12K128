C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Sources\User\main.c XSMALL HPTR OA FUNCTIONS(REENTRANT) INCDIR(.\Sourc
                    -es\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128;.\Sources\TinyMaix) P
                    -RINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          #include <STC32G.H>
    2          #include "intrins.h"
    3          #include "stdio.h"
    4          
    5          #include "tinymaix.h"
    6          
    7          typedef     unsigned char   u8;
    8          typedef     unsigned int    u16;
    9          typedef     unsigned long   u32;
   10          
   11          #define FOSC        35000000UL
   12          #define BRT         (65536 - FOSC / 115200 / 4)
   13          #define Timer0_Reload   (FOSC / 1000)      //Timer 0  1KHz
   14          
   15          uint32_t systick = 0;
   16          void Timer0_init(void)
   17          {
   18   1              TR0 = 0;   
   19   1      
   20   1          #if (Timer0_Reload < 64)    
                       #error "Timer0 too fast"
               
                   #elif ((Timer0_Reload/12) < 65536UL)    
   24   1              ET0 = 1;    
   25   1          //  PT0 = 1;    
   26   1              TMOD &= ~0x03;
   27   1              TMOD |= 0;  
   28   1          //  T0_CT = 1; 
   29   1              T0_CT = 0;  
   30   1          //  T0CLKO = 1; 
   31   1              T0CLKO = 0; 
   32   1      
   33   1              #if (Timer0_Reload < 65536UL)
   34   1                  T0x12 = 1;  //1T mode
   35   1                  TH0 = (u8)((65536UL - Timer0_Reload) / 256);
   36   1                  TL0 = (u8)((65536UL - Timer0_Reload) % 256);
   37   1              #else
                           T0x12 = 0;  //12T mode
                           TH0 = (u8)((65536UL - Timer0_Reload/12) / 256);
                           TL0 = (u8)((65536UL - Timer0_Reload/12) % 256);
                       #endif
   42   1      
   43   1              TR0 = 1;   
   44   1      
   45   1          #else
                       #error "Timer0 too slow"
                   #endif
   48   1      }
   49          
   50          void timer0_int (void) interrupt 1
   51          {
   52   1         systick++;
   53   1        if(systick%1000==0)P10 = ~P10;
   54   1      }
   55          
   56          #if 1
   57          static uint8_t mnist_pic[28*28]={
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 2   

   58            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   59            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   60            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   61            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,116,125,171,255,255,150, 93,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   62            0,  0,  0,  0,  0,  0,  0,  0,  0,169,253,253,253,253,253,253,218, 30,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   63            0,  0,  0,  0,  0,  0,  0,  0,169,253,253,253,213,142,176,253,253,122,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   64            0,  0,  0,  0,  0,  0,  0, 52,250,253,210, 32, 12,  0,  6,206,253,140,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   65            0,  0,  0,  0,  0,  0,  0, 77,251,210, 25,  0,  0,  0,122,248,253, 65,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   66            0,  0,  0,  0,  0,  0,  0,  0, 31, 18,  0,  0,  0,  0,209,253,253, 65,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   67            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,247,253,198, 10,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   68            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 76,247,253,231, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   69            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,253,253,144,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   70            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,176,246,253,159, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   71            0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 25,234,253,233, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   72            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,198,253,253,141,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   73            0,  0,  0,  0,  0,  0,  0,  0,  0, 78,248,253,189, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   74            0,  0,  0,  0,  0,  0,  0,  0, 19,200,253,253,141,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   75            0,  0,  0,  0,  0,  0,  0,  0,134,253,253,173, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   76            0,  0,  0,  0,  0,  0,  0,  0,248,253,253, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   77            0,  0,  0,  0,  0,  0,  0,  0,248,253,253, 43, 20, 20, 20, 20,  5,  0,  5, 20, 20, 37,150,150,150,147, 
             -10,  0,
   78            0,  0,  0,  0,  0,  0,  0,  0,248,253,253,253,253,253,253,253,168,143,166,253,253,253,253,253,253,253,1
             -23,  0,
   79            0,  0,  0,  0,  0,  0,  0,  0,174,253,253,253,253,253,253,253,253,253,253,253,249,247,247,169,117,117, 
             -57,  0,
   80            0,  0,  0,  0,  0,  0,  0,  0,  0,118,123,123,123,166,253,253,253,155,123,123, 41,  0,  0,  0,  0,  0, 
             - 0,  0,
   81            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   82            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   83            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   84            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   85            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
   86          };
   87          #else
               static uint8_t mnist_pic[28*28]={
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 3   

             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36, 56,137,201,199, 95, 37,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 45,152,234,254,254,254,254,254,250,211,151,  6,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0, 46,153,240,254,254,227,166,133,251,200,254,229,225,104,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,153,234,254,254,187,142,  8,  0,  0,191, 40,198,246,223,253, 21,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  8,126,253,254,233,128, 11,  0,  0,  0,  0,210, 43, 70,254,254,254, 21,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0, 72,243,254,228, 54,  0,  0,  0,  0,  3, 32,116,225,242,254,255,162,  5,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0, 75,240,254,223,109,138,178,178,169,210,251,231,254,254,254,232, 38,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  9,175,244,253,255,254,254,251,254,254,254,254,254,252,171, 25,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0, 16,136,195,176,146,153,200,254,254,254,254,150, 16,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,162,254,254,241, 99,  3,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,118,250,254,254, 90,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,242,254,254,211,  7,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 54,241,254,254,242, 59,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,131,254,254,244, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13,249,254,254,152,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0, 12,228,254,254,208,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0, 78,255,254,254, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,209,254,254,137,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,227,255,233, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,113,255,108,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
                 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
             - 0,  0,
               };
               #endif
  119          
  120          #include "mnist_valid_q_be.h"
  121          
  122          
  123          
  124          bit busy;
  125          char wptr;
  126          char rptr;
  127          char buffer[16];
  128          
  129          #define IMG_L   (28)
  130          #define IMG_CH  (1)
  131          #define CLASS_N (10)
  132          
  133          static tm_err_t layer_cb(tm_mdl_t* mdl, tml_head_t* lh)
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 4   

  134          {   //dump middle result
  135   1          int x,y,c;
  136   1          int h = lh->out_dims[1];
  137   1          int w = lh->out_dims[2];
  138   1          int ch= lh->out_dims[3];
  139   1          mtype_t* output = TML_GET_OUTPUT(mdl, lh);
  140   1          return TM_OK;
  141   1          TM_PRINTF("Layer %d callback ========\n", mdl->layer_i);
  142   1          #if 1
  143   1          for(y=0; y<h; y++){
  144   2              TM_PRINTF("[");
  145   2              for(x=0; x<w; x++){
  146   3                  TM_PRINTF("[");
  147   3                  for(c=0; c<ch; c++){
  148   4                  #if TM_MDL_TYPE == TM_MDL_FP32
                               TM_PRINTF("%.3f,", output[(y*w+x)*ch+c]);
                           #else
  151   4                      TM_PRINTF("%.3f,", TML_DEQUANT(lh,output[(y*w+x)*ch+c]));
  152   4                  #endif
  153   4                  }
  154   3                  TM_PRINTF("],");
  155   3              }
  156   2              TM_PRINTF("],\n");
  157   2          }
  158   1          TM_PRINTF("\n");
  159   1          #endif
  160   1          return TM_OK;
  161   1      }
  162          
  163          static uint8_t mdl_buf[MDL_BUF_LEN];
  164          
  165          static void parse_output(tm_mat_t* outs)
  166          {
  167   1          tm_mat_t out = outs[0];
  168   1          float* dat  = (float*)out.dat;
  169   1          float maxp = 0;
  170   1          int maxi = -1;
  171   1          int i=0;
  172   1          for(; i<CLASS_N; i++){
  173   2              if(dat[i] > maxp) {
  174   3                  maxi = i;
  175   3                  maxp = dat[i];
  176   3              }
  177   2          }
  178   1          TM_PRINTF("### Predict output is: Number %d , Prob %.3f\r\n", maxi, maxp);
  179   1          return;
  180   1      }
  181          
  182          void UartIsr() interrupt 4
  183          {
  184   1          if (TI)
  185   1          {
  186   2              TI = 0;
  187   2              busy = 0;
  188   2          }
  189   1          if (RI)
  190   1          {
  191   2              RI = 0;
  192   2              buffer[wptr++] = SBUF;
  193   2              wptr &= 0x0f;
  194   2          }
  195   1      }
  196          
  197          static void UartInit()
  198          {
  199   1          SCON = 0x50;
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 5   

  200   1        
  201   1          P_SW1 &= 0x3f;
  202   1          P_SW1 |= 0x40;  //P3.6 RXD, P3.7 TXD
  203   1        
  204   1          T2L = BRT;
  205   1          T2H = BRT >> 8;
  206   1          AUXR = 0x15;
  207   1          wptr = 0x00;
  208   1          rptr = 0x00;
  209   1          busy = 0;
  210   1      }
  211          
  212          void UartSend(char dat)
  213          {
  214   1          while (busy);
  215   1          busy = 1;
  216   1          SBUF = dat;
  217   1      }
  218          
  219          void UartSendStr(char *p)
  220          {
  221   1          while (*p)
  222   1          {
  223   2              UartSend(*p++);
  224   2          }
  225   1      }
  226          
  227          void delay_ms(u8 ms)
  228          {
  229   1           u16 i;
  230   1           do{
  231   2                i = FOSC / 6000;
  232   2                while(--i);   //6T per loop
  233   2           }while(--ms);
  234   1      }
  235          #define DELAY_T 50
  236          void main( void )
  237          {
  238   1          tm_mdl_t mdl;
  239   1          int i;
  240   1          tm_mat_t in_uint8; 
  241   1          tm_mat_t in; 
  242   1          tm_mat_t outs[1];
  243   1          tm_err_t res;
  244   1          TM_DBGT_INIT();
  245   1        
  246   1          WTST = 0;  //cpu fast
  247   1          EAXFR = 1; //enable eaxfr
  248   1          CKCON = 0; //XRAM fast
  249   1        
  250   1          P0M0 = 0x00;
  251   1          P0M1 = 0x00;
  252   1          P1M0 = 0x00;
  253   1          P1M1 = 0x00;
  254   1          P2M0 = 0x00;
  255   1          P2M1 = 0x00;
  256   1          P3M0 = 0x00;
  257   1          P3M1 = 0x00;
  258   1          P4M0 = 0x00;
  259   1          P4M1 = 0x00;
  260   1          P5M0 = 0x00;
  261   1          P5M1 = 0x00;
  262   1      
  263   1          UartInit();
  264   1          ES = 1;
  265   1          EA = 1;
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 6   

  266   1          
  267   1          Timer0_init();
  268   1          
  269   1          in_uint8.dims = 3;
  270   1          in_uint8.h    = IMG_L;
  271   1          in_uint8.w    = IMG_L;
  272   1          in_uint8.c    = IMG_CH;
  273   1          in_uint8.dat  = (mtype_t*)mnist_pic;
  274   1          
  275   1          in.dims = 3;
  276   1          in.h    = IMG_L;
  277   1          in.w    = IMG_L;
  278   1          in.c    = IMG_CH;
  279   1          in.dat  = NULL;
  280   1          
  281   1          /*while(1){
  282   1            UartSend('X');
  283   1            delay_ms(10);
  284   1              P37 = 0;    //LED On
  285   1              delay_ms(10);
  286   1              P37 = 1;    //LED Off
  287   1          }*/
  288   1        
  289   1          TM_PRINTF("mnist demo\r\n");
  290   1      
  291   1          for(i=0 ; i<28*28; i++){
  292   2              TM_PRINTF("%3d,", mnist_pic[i]);
  293   2              if(i%28==27)printf("\r\n");
  294   2          }
  295   1          
  296   1          tm_stat((tm_mdlbin_t*)mdl_data); 
  297   1      
  298   1          res = tm_load(&mdl, mdl_data, mdl_buf, layer_cb, &in);
  299   1          if(res != TM_OK) {
  300   2              TM_PRINTF("tm model load err %d\r\n", res);
  301   2              return ;
  302   2          }
  303   1      
  304   1          res = tm_preprocess(&mdl, TMPP_UINT2INT, &in_uint8, &in); 
  305   1          
  306   1          TM_DBGT_START();
  307   1          res = tm_run(&mdl, &in, outs);
  308   1          TM_DBGT("tm_run");
  309   1      
  310   1          if(res==TM_OK) parse_output(outs);  
  311   1          else TM_PRINTF("tm run error: %d\r\n", res);
  312   1          tm_unload(&mdl);  
  313   1      
  314   1          while (1);
  315   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       994     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =      2270     ------
  bit size             =         1     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
C251 COMPILER V5.60.0,  main                                                               26/09/22  12:01:19  PAGE 7   

  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      3384     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
