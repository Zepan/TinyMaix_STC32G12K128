C251 COMPILER V5.60.0,  adckey                                                             21/09/22  15:15:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE adckey
OBJECT MODULE PLACED IN .\Objects\adckey.obj
COMPILER INVOKED BY: D:\SDK\Keil_V5\C251\BIN\C251.EXE Sources\User\adckey.c XSMALL OA FUNCTIONS(REENTRANT) BROWSE INCDIR
                    -(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128) DEBUG PRINT(
                    -.\Listings\adckey.lst) TABS(2) OBJECT(.\Objects\adckey.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          /*************  功能说明    **************
   14          
   15          本例程基于STC32G为主控芯片的实验箱进行编写测试。
   16          
   17          通过ADC采集按键口ADC值，根据ADC值设置键码为1~16.
   18          
   19          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
   20          
   21          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
   22          
   23          调整时间键:
   24          键码1: 小时+.
   25          键码2: 小时-.
   26          键码3: 分钟+.
   27          键码4: 分钟-.
   28          
   29          ******************************************/
   30          
   31          #include "FreeRTOS.h"
   32          #include "task.h"
   33          
   34          #include "adckey.h"
   35          #include "rtc.h"
   36          //#include "display.h"
   37          #include "adc.h"
   38          
   39          #define ADCKEY_CHANNEL          0                       //ADC按键的输入通道（P1.0）
   40          #define ADC_OFFSET              64                      //ADC按键扫描时的偏差范围
   41          
   42          
   43          static void prvAdcKeyInit( void );
   44          static void prvAdcCalculateKey( void );
   45          static void prvAdcKeyEvent( void );
   46          
   47          
   48          static uint8_t ucKeyState;                              //ADC按键状态
   49          static uint8_t ucKeyState1;
   50          static uint8_t ucKeyState2;
   51          static uint8_t ucKeyState3;
   52          static uint8_t ucKeyHoldCnt;                            //键按下计时
   53          
   54          uint8_t ucKeyCode;                                      //给用户使用的键码, 1~16有效
   55          
   56          /* ADC按键扫描任务函数 */
   57          portTASK_FUNCTION_PROTO( vAdcKeyTask, pvParameters )
C251 COMPILER V5.60.0,  adckey                                                             21/09/22  15:15:38  PAGE 2   

   58          {
   59   1          
   60   1        UNUSED( pvParameters );
   61   1      
   62   1          prvAdcKeyInit();
   63   1          while(1)
   64   1          {
   65   2              prvAdcCalculateKey();
   66   2              prvAdcKeyEvent();
   67   2      
   68   2              vTaskDelay(10);
   69   2          }
   70   1          
   71   1          vTaskDelete(NULL);
   72   1      }   
   73          
   74          static void prvAdcKeyInit( void )
   75          {
   76   1          vAdcInit();
   77   1          
   78   1          P1M1 |= 0x01;                                       //设置 P1.0 为 ADC 输入口
   79   1          P1M0 &= ~0x01;
   80   1      
   81   1          ucKeyState  = 0;
   82   1          ucKeyState1 = 0;
   83   1          ucKeyState2 = 0;
   84   1          ucKeyState3 = 0;                                    //键状态
   85   1          ucKeyHoldCnt = 0;                                   //键按下计时
   86   1          ucKeyCode = 0;                                      //给用户使用的键码, 1~16有效
   87   1      }
   88          
   89          /***************** ADC键盘计算键码 *****************************
   90          电路和软件算法设计: Coody
   91          本ADC键盘方案在很多实际产品设计中, 验证了其稳定可靠, 即使按键使用导电膜,都很可靠.
   92          16个键,理论上各个键对应的ADC值为 (4096 / 16) * k = 256 * k, k = 1 ~ 16, 特别的, k=16时,对应的ADC值是4095.
   93          但是实际会有偏差,则判断时限制这个偏差, ADC_OFFSET为+-偏差, 则ADC值在 (256*k-ADC_OFFSET) 与 (256*k+ADC_OFF
             -SET)之间为键有效.
   94          间隔一定的时间,就采样一次ADC,比如10ms.
   95          为了避免偶然的ADC值误判, 或者避免ADC在上升或下降时误判, 使用连续3次ADC值均在偏差范围内时, ADC值才认为有效
             -.
   96          以上算法, 能保证读键非常可靠.
   97          **********************************************/
   98          static void prvAdcCalculateKey( void )
   99          {
  100   1          uint16_t usResult;
  101   1          uint8_t i;
  102   1          uint16_t j;
  103   1          
  104   1          usResult = usAdcGetResult(ADCKEY_CHANNEL);
  105   1          
  106   1          if(usResult < (256 - ADC_OFFSET))
  107   1          {
  108   2              ucKeyState = 0;                                 //键状态归0
  109   2              ucKeyHoldCnt = 0;
  110   2          }
  111   1          
  112   1          j = 256;
  113   1          for (i = 1; i <= 16; i++)
  114   1          {
  115   2              if ((usResult >= (j - ADC_OFFSET)) &&
  116   2                  (usResult <= (j + ADC_OFFSET)))
  117   2                 break;                                       //判断是否在偏差范围内
  118   2              j += 256;
  119   2          }
  120   1          
  121   1          ucKeyState3 = ucKeyState2;
C251 COMPILER V5.60.0,  adckey                                                             21/09/22  15:15:38  PAGE 3   

  122   1          ucKeyState2 = ucKeyState1;
  123   1          
  124   1          if (i > 16)
  125   1              ucKeyState1 = 0;                                //键无效
  126   1          else                                                //键有效
  127   1          {
  128   2              ucKeyState1 = i;
  129   2              if ((ucKeyState3 == ucKeyState2) &&
  130   2                  (ucKeyState2 == ucKeyState1) &&
  131   2                  (ucKeyState3 > 0) &&
  132   2                  (ucKeyState2 > 0) &&
  133   2                  (ucKeyState1 > 0))
  134   2              {
  135   3                  if (ucKeyState == 0)                        //第一次检测到
  136   3                  {
  137   4                      ucKeyCode = i;                          //保存键码
  138   4                      ucKeyState = i;                         //保存键状态
  139   4                      ucKeyHoldCnt = 0;
  140   4                  }
  141   3                  
  142   3                  if (ucKeyState == i)                        //连续检测到同一键按着
  143   3                  {
  144   4                      if (++ucKeyHoldCnt >= 100)              //按下1秒后,以10次每秒的速度Repeat Key
  145   4                      {
  146   5                          ucKeyHoldCnt = 90;
  147   5                          ucKeyCode  = i;                     //保存键码
  148   5                      }
  149   4                  }
  150   3                  else
  151   3                      ucKeyHoldCnt = 0;                       //按下时间计数归0
  152   3              }
  153   2          }
  154   1      }
  155          
  156          static void prvAdcKeyEvent( void )
  157          {
  158   1          uint8_t ucCode;
  159   1          
  160   1          ucCode = ucKeyCode;
  161   1          ucKeyCode = 0;
  162   1          
  163   1          if (ucCode > 0)                                     //有键按下
  164   1          {
  165   2      //        pucLEDBuffer[6] = ucCode / 10;                  //显示键码
  166   2      //        pucLEDBuffer[7] = ucCode % 10;                  //显示键码
  167   2      
  168   2              switch (ucCode)
  169   2              {
  170   3              case 1:                                         //hour +1
  171   3                  if (++ucHour >= 24)
  172   3                      ucHour = 0;
  173   3                  break;
  174   3              case 2:                                         //hour -1
  175   3                  if (--ucHour >= 24)
  176   3                      ucHour = 23;
  177   3                  break;
  178   3              case 3:                                         //minute +1
  179   3                  ucSecond = 0;
  180   3                  if (++ucMinute >= 60)
  181   3                      ucMinute = 0;
  182   3                  break;
  183   3              case 4:                                         //minute -1
  184   3                  ucSecond = 0;
  185   3                  if (--ucMinute >= 60)
  186   3                      ucMinute = 59;
  187   3                  break;
C251 COMPILER V5.60.0,  adckey                                                             21/09/22  15:15:38  PAGE 4   

  188   3              default:
  189   3                  return;
  190   3              }
  191   2              
  192   2              vRtcUpdateDisplay();
  193   2          }
  194   1      }
  195          
  196          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       435     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         6     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
