C251 COMPILER V5.60.0,  ds18b20                                                            27/04/22  14:41:59  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ds18b20
OBJECT MODULE PLACED IN .\Objects\ds18b20.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Sources\User\ds18b20.c XSMALL OA FUNCTIONS(REENTRANT) BROWSE INCDIR(.\
                    -Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128) DEBUG PRINT(.\L
                    -istings\ds18b20.lst) OBJECT(.\Objects\ds18b20.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          /*************  功能说明    **************
   14          
   15          本例程基于STC32G为主控芯片的实验箱进行编写测试。
   16          
   17          通过一个IO口获取一线制温度传感器 DS18B20 温度值.
   18          
   19          用STC的MCU的IO方式驱动8位数码管，右边4位数码管显示测量的温度值.
   20          
   21          ******************************************/
   22          
   23          #include "FreeRTOS.h"
   24          #include "task.h"
   25          
   26          #include "ds18b20.h"
   27          #include "display.h"
   28          
   29          sbit DQ = P3^3;                   //DS18B20的数据口
   30          
   31          static uint8_t MinusFlag;       //负数标志，0：正数，1：负数
   32          
   33          uint16_t ReadTemperature(void);
   34          void DisplayTemperature(uint16_t temp);
   35          
   36          /* RTC任务函数 */
   37          portTASK_FUNCTION_PROTO( vDS18B20Task, pvParameters )
   38          {
   39   1          uint16_t Temp;
   40   1          
   41   1          UNUSED( pvParameters );
   42   1          
   43   1          while(1)
   44   1          {
   45   2              EA = 0;
   46   2              Temp = ReadTemperature();
   47   2              EA = 1;
   48   2              DisplayTemperature(Temp);
   49   2      
   50   2              vTaskDelay(300);
   51   2          }
   52   1          
   53   1          vTaskDelete(NULL);
   54   1      }   
   55          
   56          /**************************************
   57          延时函数
C251 COMPILER V5.60.0,  ds18b20                                                            27/04/22  14:41:59  PAGE 2   

   58          **************************************/
   59          void delay_us(uint8_t us)
   60          {
   61   1          do{
   62   2              usrNOP();
   63   2              usrNOP();
   64   2          }while(--us);
   65   1      }
   66          
   67          /**************************************
   68          复位DS18B20,并检测设备是否存在
   69          **************************************/
   70          void DS18B20_Reset()
   71          {
   72   1          CY = 1;
   73   1          while (CY)
   74   1          {
   75   2              DQ = 0;                     //送出低电平复位信号
   76   2              delay_us(240);              //延时至少480us
   77   2              delay_us(240);
   78   2              DQ = 1;                     //释放数据线
   79   2              delay_us(60);               //等待60us
   80   2              CY = DQ;                    //检测存在脉冲
   81   2              delay_us(240);              //等待设备释放数据线
   82   2              delay_us(180);
   83   2          }
   84   1      }
   85          
   86          /**************************************
   87          从DS18B20读1字节数据
   88          **************************************/
   89          uint8_t DS18B20_ReadByte()
   90          {
   91   1          uint8_t i;
   92   1          uint8_t dat = 0;
   93   1      
   94   1          for (i=0; i<8; i++)             //8位计数器
   95   1          {
   96   2              dat >>= 1;
   97   2              DQ = 0;                     //开始时间片
   98   2              delay_us(1);                //延时等待
   99   2              DQ = 1;                     //准备接收
  100   2              delay_us(1);                //接收延时
  101   2              if (DQ) dat |= 0x80;        //读取数据
  102   2              delay_us(60);               //等待时间片结束
  103   2          }
  104   1      
  105   1          return dat;
  106   1      }
  107          
  108          /**************************************
  109          向DS18B20写1字节数据
  110          **************************************/
  111          void DS18B20_WriteByte(uint8_t dat)
  112          {
  113   1          char i;
  114   1      
  115   1          for (i=0; i<8; i++)             //8位计数器
  116   1          {
  117   2              DQ = 0;                     //开始时间片
  118   2              delay_us(1);                //延时等待
  119   2              dat >>= 1;                  //送出数据
  120   2              DQ = CY;
  121   2              delay_us(60);               //等待时间片结束
  122   2              DQ = 1;                     //恢复数据线
  123   2              delay_us(1);                //恢复延时
C251 COMPILER V5.60.0,  ds18b20                                                            27/04/22  14:41:59  PAGE 3   

  124   2          }
  125   1      }
  126          
  127          uint16_t ReadTemperature(void)
  128          {
  129   1          uint16_t TempH, TempL, Temperature;
  130   1              
  131   1          DS18B20_Reset();                //设备复位
  132   1          DS18B20_WriteByte(0xCC);        //跳过ROM命令
  133   1          DS18B20_WriteByte(0x44);        //开始转换命令
  134   1          while (!DQ);                    //等待转换完成
  135   1      
  136   1          DS18B20_Reset();                //设备复位
  137   1          DS18B20_WriteByte(0xCC);        //跳过ROM命令
  138   1          DS18B20_WriteByte(0xBE);        //读暂存存储器命令
  139   1          TempL = DS18B20_ReadByte();     //读温度低字节
  140   1          TempH = DS18B20_ReadByte();     //读温度高字节
  141   1              
  142   1          if(TempH & 0xf8)    //判断是否位负数
  143   1          {
  144   2              MinusFlag = 1;  //设置负数标志
  145   2              Temperature = (TempH<<8) | TempL;
  146   2              Temperature = ~Temperature + 1;
  147   2              Temperature *= 0.625;       //0.0625 * 10，保留1位小数点
  148   2          }
  149   1          else
  150   1          {
  151   2              MinusFlag = 0;  //清除负数标志
  152   2              Temperature = (((TempH<<8) | TempL) * 0.625); //0.0625 * 10，保留1位小数点
  153   2          }
  154   1      
  155   1          return Temperature;
  156   1      }
  157          
  158          void DisplayTemperature(uint16_t temp)
  159          {
  160   1          if(MinusFlag)
  161   1          {
  162   2              if(temp > 999)
  163   2              {
  164   3      //            pucLEDBuffer[3] = DIS_;
  165   3                  pucLEDBuffer[4] = temp / 1000;
  166   3              }
  167   2              else
  168   2              {
  169   3      //            pucLEDBuffer[3] = DIS_BLACK;
  170   3                  pucLEDBuffer[4] = DIS_;
  171   3              }
  172   2          }
  173   1          else
  174   1          {
  175   2      //        pucLEDBuffer[3] = DIS_BLACK;
  176   2              if(temp > 999)
  177   2              {
  178   3                  pucLEDBuffer[4] = temp / 1000;
  179   3              }
  180   2              else
  181   2              {
  182   3                  pucLEDBuffer[4] = DIS_BLACK;
  183   3              }
  184   2          }
  185   1          pucLEDBuffer[5] = (temp % 1000) / 100;
  186   1          pucLEDBuffer[6] = ((temp % 100) / 10) + DIS_DOT;
  187   1          pucLEDBuffer[7] = temp % 10;
  188   1      }

C251 COMPILER V5.60.0,  ds18b20                                                            27/04/22  14:41:59  PAGE 4   


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       395     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         1     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
