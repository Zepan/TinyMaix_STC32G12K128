C251 COMPILER V5.60.0,  list                                                               21/09/22  22:20:49  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE list
OBJECT MODULE PLACED IN .\Objects\list.obj
COMPILER INVOKED BY: D:\SDK\Keil_V5\C251\BIN\C251.EXE Sources\FreeRTOS\list.c XSMALL OA FUNCTIONS(REENTRANT) ROM(HUGE) I
                    -NCDIR(.\Sources\User;.\Sources\User\include;.\Sources\FreeRTOS\include;.\Sources\FreeRTOS\portable\STC32G12K128;.\Source
                    -s\TinyMaix) PRINT(.\Listings\list.lst) TABS(2) OBJECT(.\Objects\list.obj) 

stmt  level    source

    1          /*
    2           * FreeRTOS Kernel V10.4.6
    3           * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
    4           *
    5           * SPDX-License-Identifier: MIT
    6           *
    7           * Permission is hereby granted, free of charge, to any person obtaining a copy of
    8           * this software and associated documentation files (the "Software"), to deal in
    9           * the Software without restriction, including without limitation the rights to
   10           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   11           * the Software, and to permit persons to whom the Software is furnished to do so,
   12           * subject to the following conditions:
   13           *
   14           * The above copyright notice and this permission notice shall be included in all
   15           * copies or substantial portions of the Software.
   16           *
   17           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   18           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
   19           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
   20           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
   21           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   22           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   23           *
   24           * https://www.FreeRTOS.org
   25           * https://github.com/FreeRTOS
   26           *
   27           */
   28          
   29          
   30          #include <stdlib.h>
   31          
   32          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
   33           * all the API functions to use the MPU wrappers.  That should only be done when
   34           * task.h is included from an application file. */
   35          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
   36          
   37          #include "FreeRTOS.h"
   38          #include "list.h"
   39          
   40          /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
   41           * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
   42           * defined for the header files above, but not in this file, in order to
   43           * generate the correct privileged Vs unprivileged linkage and placement. */
   44          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
   45          
   46          /*-----------------------------------------------------------
   47          * PUBLIC LIST API documented in list.h
   48          *----------------------------------------------------------*/
   49          
   50          void vListInitialise( List_t * const pxList )
   51          {
   52   1          /* The list structure contains a list item which is used to mark the
   53   1           * end of the list.  To initialise the list the list end is inserted
   54   1           * as the only list entry. */
   55   1          pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list str
             -ucture is used as the list end to save RAM.  This is checked and valid. */
   56   1      
C251 COMPILER V5.60.0,  list                                                               21/09/22  22:20:49  PAGE 2   

   57   1          /* The list end value is the highest possible value in the list to
   58   1           * ensure it remains at the end of the list. */
   59   1          pxList->xListEnd.xItemValue = portMAX_DELAY;
   60   1      
   61   1          /* The list end next and previous pointers point to itself so we know
   62   1           * when the list is empty. */
   63   1          pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The m
             -ini list structure is used as the list end to save RAM.  This is checked and valid. */
   64   1          pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The m
             -ini list structure is used as the list end to save RAM.  This is checked and valid. */
   65   1      
   66   1          pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   67   1      
   68   1          /* Write known values into the list if
   69   1           * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
   70   1          listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
   71   1          listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
   72   1      }
   73          /*-----------------------------------------------------------*/
   74          
   75          void vListInitialiseItem( ListItem_t * const pxItem )
   76          {
   77   1          /* Make sure the list item is not recorded as being on a list. */
   78   1          pxItem->pxContainer = NULL;
   79   1      
   80   1          /* Write known values into the list item if
   81   1           * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
   82   1          listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
   83   1          listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
   84   1      }
   85          /*-----------------------------------------------------------*/
   86          
   87          void vListInsertEnd( List_t * const pxList,
   88                               ListItem_t * const pxNewListItem )
   89          {
   90   1          ListItem_t * const pxIndex = pxList->pxIndex;
   91   1      
   92   1          /* Only effective when configASSERT() is also defined, these tests may catch
   93   1           * the list data structures being overwritten in memory.  They will not catch
   94   1           * data errors caused by incorrect configuration or use of FreeRTOS. */
   95   1          listTEST_LIST_INTEGRITY( pxList );
   96   1          listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
   97   1      
   98   1          /* Insert a new list item into pxList, but rather than sort the list,
   99   1           * makes the new list item the last item to be removed by a call to
  100   1           * listGET_OWNER_OF_NEXT_ENTRY(). */
  101   1          pxNewListItem->pxNext = pxIndex;
  102   1          pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  103   1      
  104   1          /* Only used during decision coverage testing. */
  105   1          mtCOVERAGE_TEST_DELAY();
  106   1      
  107   1          pxIndex->pxPrevious->pxNext = pxNewListItem;
  108   1          pxIndex->pxPrevious = pxNewListItem;
  109   1      
  110   1          /* Remember which list the item is in. */
  111   1          pxNewListItem->pxContainer = pxList;
  112   1      
  113   1          ( pxList->uxNumberOfItems )++;
  114   1      }
  115          /*-----------------------------------------------------------*/
  116          
  117          void vListInsert( List_t * const pxList,
  118                            ListItem_t * const pxNewListItem )
  119          {
  120   1          ListItem_t * pxIterator;
C251 COMPILER V5.60.0,  list                                                               21/09/22  22:20:49  PAGE 3   

  121   1          const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  122   1      
  123   1          /* Only effective when configASSERT() is also defined, these tests may catch
  124   1           * the list data structures being overwritten in memory.  They will not catch
  125   1           * data errors caused by incorrect configuration or use of FreeRTOS. */
  126   1          listTEST_LIST_INTEGRITY( pxList );
  127   1          listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  128   1      
  129   1          /* Insert the new list item into the list, sorted in xItemValue order.
  130   1           *
  131   1           * If the list already contains a list item with the same item value then the
  132   1           * new list item should be placed after it.  This ensures that TCBs which are
  133   1           * stored in ready lists (all of which have the same xItemValue value) get a
  134   1           * share of the CPU.  However, if the xItemValue is the same as the back marker
  135   1           * the iteration loop below will not end.  Therefore the value is checked
  136   1           * first, and the algorithm slightly modified if necessary. */
  137   1          if( xValueOfInsertion == portMAX_DELAY )
  138   1          {
  139   2              pxIterator = pxList->xListEnd.pxPrevious;
  140   2          }
  141   1          else
  142   1          {
  143   2              /* *** NOTE ***********************************************************
  144   2              *  If you find your application is crashing here then likely causes are
  145   2              *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
  146   2              *  more tips, and ensure configASSERT() is defined!
  147   2              *  https://www.FreeRTOS.org/a00110.html#configASSERT
  148   2              *
  149   2              *   1) Stack overflow -
  150   2              *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
  151   2              *   2) Incorrect interrupt priority assignment, especially on Cortex-M
  152   2              *      parts where numerically high priority values denote low actual
  153   2              *      interrupt priorities, which can seem counter intuitive.  See
  154   2              *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
  155   2              *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
  156   2              *      https://www.FreeRTOS.org/a00110.html
  157   2              *   3) Calling an API function from within a critical section or when
  158   2              *      the scheduler is suspended, or calling an API function that does
  159   2              *      not end in "FromISR" from an interrupt.
  160   2              *   4) Using a queue or semaphore before it has been initialised or
  161   2              *      before the scheduler has been started (are interrupts firing
  162   2              *      before vTaskStartScheduler() has been called?).
  163   2              *   5) If the FreeRTOS port supports interrupt nesting then ensure that
  164   2              *      the priority of the tick interrupt is at or below
  165   2              *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
  166   2              **********************************************************************/
  167   2      
  168   2              for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
             -eOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list en
             -d to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion
             -. */
  169   2              {
  170   3                  /* There is nothing to do here, just iterating to the wanted
  171   3                   * insertion position. */
  172   3              }
  173   2          }
  174   1      
  175   1          pxNewListItem->pxNext = pxIterator->pxNext;
  176   1          pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  177   1          pxNewListItem->pxPrevious = pxIterator;
  178   1          pxIterator->pxNext = pxNewListItem;
  179   1      
  180   1          /* Remember which list the item is in.  This allows fast removal of the
  181   1           * item later. */
  182   1          pxNewListItem->pxContainer = pxList;
  183   1      
C251 COMPILER V5.60.0,  list                                                               21/09/22  22:20:49  PAGE 4   

  184   1          ( pxList->uxNumberOfItems )++;
  185   1      }
  186          /*-----------------------------------------------------------*/
  187          
  188          UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
  189          {
  190   1      /* The list item knows which list it is in.  Obtain the list from the list
  191   1       * item. */
  192   1          List_t * const pxList = pxItemToRemove->pxContainer;
  193   1      
  194   1          pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  195   1          pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  196   1      
  197   1          /* Only used during decision coverage testing. */
  198   1          mtCOVERAGE_TEST_DELAY();
  199   1      
  200   1          /* Make sure the index is left pointing to a valid item. */
  201   1          if( pxList->pxIndex == pxItemToRemove )
  202   1          {
  203   2              pxList->pxIndex = pxItemToRemove->pxPrevious;
  204   2          }
  205   1          else
  206   1          {
  207   2              mtCOVERAGE_TEST_MARKER();
  208   2          }
  209   1      
  210   1          pxItemToRemove->pxContainer = NULL;
  211   1          ( pxList->uxNumberOfItems )--;
  212   1      
  213   1          return pxList->uxNumberOfItems;
  214   1      }
  215          /*-----------------------------------------------------------*/


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       396     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
